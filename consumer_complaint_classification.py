# -*- coding: utf-8 -*-
"""Consumer Complaint Classification.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1SwK6yUiky6rD3kTqxoeeR3r3BBfVjjCN
"""

import pandas as pd
import numpy as np
from sklearn.feature_extraction.text import CountVectorizer
from sklearn.model_selection import train_test_split
from sklearn.naive_bayes import MultinomialNB
from sklearn.linear_model import SGDClassifier
import nltk
import re
from nltk.corpus import stopwords
import string

data = pd.read_csv("/content/drive/MyDrive/consumercomplaints.csv")

data.head()

data.isnull().sum()

data= data.drop("Unnamed: 0",axis=1)

data.head()

data.describe()

data.info()

data.dropna()

data=data.dropna()

print(data["Product"].value_counts())

"""**Training the model **"""

#cleaning the data first
nltk.download('stopwords')
stemmer = nltk.SnowballStemmer("english")
stopword=set(stopwords.words('english'))

def clean(text):
    text = str(text).lower()
    text = re.sub('\[.*?\]', '', text)
    text = re.sub('https?://\S+|www\.\S+', '', text)
    text = re.sub('<.*?>+', '', text)
    text = re.sub('[%s]' % re.escape(string.punctuation), '', text)
    text = re.sub('\n', '', text)
    text = re.sub('\w*\d\w*', '', text)
    text = [word for word in text.split(' ') if word not in stopword]
    text=" ".join(text)
    text = [stemmer.stem(word) for word in text.split(' ')]
    text=" ".join(text)
    return text
data["Consumer complaint narrative"] = data["Consumer complaint narrative"].apply(clean)

"""**splitting the data into trianing and testing sets**"""

data = data[["Consumer complaint narrative", "Product"]]
x = np.array(data["Consumer complaint narrative"])
y = np.array(data["Product"])

cv = CountVectorizer()
X = cv.fit_transform(x)
X_train, X_test, y_train, y_test = train_test_split(X, y,
                                                    test_size=0.33,
                                                    random_state=42)

sgdmodel = SGDClassifier()
sgdmodel.fit(X_train,y_train)

#checking accuracy
from sklearn.metrics import accuracy_score
print(accuracy_score(sgdmodel.predict(X_train),y_train))

